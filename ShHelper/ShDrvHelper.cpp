#include <ShDrvInc.h>

PSH_GLOBAL_ROUTINES  g_Routines;
PSH_GLOBAL_VARIABLES g_Variables;
PSH_GLOBAL_OFFSETS   g_Offsets;
PSH_POOL_INFORMATION g_Pools;

// LLVM is not support
//#pragma alloc_text("INIT", DriverEntry)

NTSTATUS DriverEntry(
	IN PDRIVER_OBJECT DriverObject, 
	IN PUNICODE_STRING RegistryPath)
{
#if TRACE_LOG_DEPTH & TRACE_ENTRY
	TraceLog(__PRETTY_FUNCTION__, __FUNCTION__);
#endif
	SAVE_CURRENT_COUNTER;
	auto Status = STATUS_SUCCESS;

	DriverObject->DriverUnload = HelperFinalize;

	Status = DriverInitialize();
	if (!NT_SUCCESS(Status)) { ShDrvPoolManager::Finalize(); ERROR_END }
	Log("Loaded driver");
	
FINISH:
	PRINT_ELAPSED;
	return Status;
}

VOID HelperFinalize(
	IN PDRIVER_OBJECT DriverObject)
{
#if TRACE_LOG_DEPTH & TRACE_ENTRY
	TraceLog(__PRETTY_FUNCTION__, __FUNCTION__);
#endif
	SAVE_CURRENT_COUNTER;
	ShDrvPoolManager::Finalize();

	Log("Driver unload");

	PRINT_ELAPSED;
}

NTSTATUS DriverInitialize()
{
#if TRACE_LOG_DEPTH & TRACE_ENTRY
	TraceLog(__PRETTY_FUNCTION__, __FUNCTION__);
#endif
	SAVE_CURRENT_COUNTER;
	auto Status = STATUS_SUCCESS;
	ShDrvPe* Pe = nullptr;
	
	Status = ShDrvPoolManager::Initialize();
	if (!NT_SUCCESS(Status)) 
	{
		ShDrvPoolManager::Finalize();
		ERROR_END 
	}

	GET_GLOBAL_POOL(g_Routines, GLOBAL_ROUTINES);
	GET_GLOBAL_POOL(g_Variables, GLOBAL_VARIABLES);
	GET_GLOBAL_POOL(g_Offsets, GLOBAL_OFFSETS);

	g_Variables->KUserSharedData = reinterpret_cast<PKUSER_SHARED_DATA>(KUSER_SHARED_DATA_ADDRESS);
	g_Variables->BuildNumber = g_Variables->KUserSharedData->NtBuildNumber;
	
	g_Variables->SystemBaseAddress = ShDrvCore::GetKernelBaseAddress("ntoskrnl.exe", SH_GET_BASE_METHOD::LoadedModuleList);
	g_Variables->SystemDirBase = __readcr3();

	GET_EXPORT_VARIABLE(PsLoadedModuleList, PLIST_ENTRY);
	GET_EXPORT_VARIABLE(PsLoadedModuleResource, PERESOURCE);

	if (!NT_SUCCESS(Status)) { Status = STATUS_NOT_SUPPORTED; ERROR_END }

	Status = InitializeOffset_Unsafe();
	if (!NT_SUCCESS(Status)) { ERROR_END }
	
	Pe = ShDrvCore::New<ShDrvPe>();
	Status = Pe->Initialize(g_Variables->SystemBaseAddress, PsInitialSystemProcess);
	if (!NT_SUCCESS(Status)) { ERROR_END }

	g_Variables->SystemEndAddress = Pe->GetImageEnd();

	GET_EXPORT_ROUTINE(PsGetProcessImageFileName, Ps);
	GET_EXPORT_ROUTINE(PsGetProcessPeb, Ps);
	GET_EXPORT_ROUTINE(PsGetProcessWow64Process, Ps);
	GET_EXPORT_ROUTINE(ObGetObjectType, Ob);

	if (!NT_SUCCESS(Status)) { Status = STATUS_NOT_SUPPORTED; ERROR_END }

FINISH:
	ShDrvCore::Delete(Pe);
	PRINT_ELAPSED;
	return Status;
}

NTSTATUS InitializeOffset_Unsafe()
{
#if TRACE_LOG_DEPTH & TRACE_ENTRY
	TraceLog(__PRETTY_FUNCTION__, __FUNCTION__);
#endif
	
	SAVE_CURRENT_COUNTER;
	auto Status = STATUS_INVALID_PARAMETER;
	if(g_Offsets == nullptr || g_Variables == nullptr) { ERROR_END }

	switch (g_Variables->BuildNumber)
	{
	case WINDOWS_7:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0xDC);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0xE0);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x160);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x180);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x188);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x218);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x288);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x338);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x200);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x1f0);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x320);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x308);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x328);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x444);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x278);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x50);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xb8);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x164);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x210);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x388);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x3b0);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x410);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x420);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x438);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x448);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x44c);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x378);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0);
		break;
	}
	case WINDOWS_7_SP1:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0xDC);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0xE0);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x160);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x180);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x188);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x218);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x288);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x338);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x200);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x1f0);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x320);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x308);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x328);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x444);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x278);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x50);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xb8);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x164);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x210);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x388);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x3b0);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x410);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x420);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x438);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x448);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x44c);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x378);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0);
		break;
	}
	case WINDOWS_8:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x234);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x238);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2c8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x358);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3c8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3e8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x408);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x410);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x470);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x480);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x58c);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x590);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x630);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x370);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x398);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x3f0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x400);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x418);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x42c);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x430);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x450);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0);
		break;
	}
	case WINDOWS_8_1:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x234);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x238);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2c8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x358);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3c8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3e8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x408);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x410);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x470);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x480);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x5d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x5d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x660);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x5f8);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x620);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x678);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x688);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6a0);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6b4);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6b8);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x6d8);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x760);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x768);
		break;
	}
	case WINDOWS_10_1507:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x23c);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2d8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2f0);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x368);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3d8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x480);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x490);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x604);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x608);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x690);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x600);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x628);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x680);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x690);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6a8);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6bc);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6c0);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x6e0);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x790);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x798);
		break;
	}
	case WINDOWS_10_1511:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x23c);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2d8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2f0);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x368);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3d8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x60c);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x610);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x698);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x600);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x628);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x680);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x690);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6a8);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6bc);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6c0);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x6e0);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x790);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x798);
		break;
	}
	case WINDOWS_10_1607:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x23c);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2d8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2f0);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x368);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3d8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x61c);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x620);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x6a8);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x608);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x630);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x688);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x698);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6b0);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6c0);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6c4);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x6f0);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x798);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x7a0);
		break;
	}
	case WINDOWS_10_1703:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x23c);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2d8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x368);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3d8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x624);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x628);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x6b0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x610);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x638);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x690);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x6a0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6b8);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6c8);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6cc);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x6f8);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x7a0);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x7a8);
		break;
	}
	case WINDOWS_10_1709:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x23c);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2d8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x368);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3d8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x624);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x628);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x6b0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x610);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x638);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x690);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x6a8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6c0);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6d0);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6d4);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x700);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x7a8);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x7b0);
		break;
	}
	case WINDOWS_10_1803:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x23c);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x278);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2d8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x368);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3d8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x624);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x628);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x6b0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x610);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x638);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x690);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x6a8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6c0);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6d0);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6d4);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x700);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x7a8);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x7b0);
		break;
	}
	case WINDOWS_10_1809:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x23c);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x278);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2d8);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x368);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3d8);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x624);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x628);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x6b0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x610);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x638);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x690);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x6a8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6c0);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6d0);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6d4);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x700);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x7a0);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x7a8);
		break;
	}
	case WINDOWS_10_1903:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x248);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x280);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2f0);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x370);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3e0);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x654);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x658);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x6e0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x620);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x648);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x6a0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x6b8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6d0);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6e0);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6e4);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x710);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x7b0);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x7b8);
		break;
	}
	case WINDOWS_10_1909:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x240);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x248);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x280);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x2e0);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x2e8);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x2f0);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x370);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x3e0);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x3f8);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x418);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x420);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x428);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x488);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x498);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x654);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x658);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x6e0);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x620);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x648);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x6a0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x6b8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x6d0);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x6e0);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x6e4);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x710);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x7b0);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x7b8);
		break;
	}
	case WINDOWS_10_20H1:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x348);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x350);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x388);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x438);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x440);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x4c8);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x538);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x550);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x570);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x578);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x580);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x5e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x5f0);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x7d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x7d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x860);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x450);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x478);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x4d0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x4e8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x500);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x510);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x514);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x548);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x5e8);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x5f0);
		break;
	}
	case WINDOWS_10_20H2:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x348);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x350);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x388);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x438);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x440);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x4c8);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x538);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x550);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x570);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x578);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x580);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x5e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x5f0);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x7d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x7d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x860);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x450);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x478);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x4d0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x4e8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x500);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x510);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x514);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x548);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x5e8);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x5f0);
		break;
	}
	case WINDOWS_10_21H1:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x348);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x350);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x388);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x438);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x440);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x4c8);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x538);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x550);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x570);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x578);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x580);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x5e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x5f0);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x7d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x7d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x860);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x450);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x478);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x4d0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x4e8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x500);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x510);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x514);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x548);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x5e8);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x5f0);
		break;
	}
	case WINDOWS_10_21H2:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x348);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x350);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x388);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x438);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x440);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x4c8);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x538);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x550);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x570);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x578);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x580);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x5e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x5f0);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x7d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x7d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x860);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x450);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x478);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x4d0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x4e8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x500);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x510);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x514);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x548);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x5e8);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x5f0);
		break;
	}
	case WINDOWS_10_22H2:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x348);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x350);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x388);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x438);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x440);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x4c8);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x538);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x550);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x570);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x578);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x580);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x5e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x5f0);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x7d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x7d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x860);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x450);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x478);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x4d0);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x4e8);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x500);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x510);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x514);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x548);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x5e8);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x5f0);
		break;
	}
	case WINDOWS_11_21H2:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x348);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x350);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x388);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x438);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x440);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x4c8);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x538);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x550);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x570);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x578);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x580);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x5e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x5f0);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x7d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x7d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x860);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x4a0);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x4c8);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x520);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x538);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x550);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x560);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x564);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x598);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x638);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x640);
		break;
	}
	case WINDOWS_11_22H2:
	{
		SET_GLOBAL_OFFSET(KPROCESS, DirectoryTableBase, 0x28);
		SET_GLOBAL_OFFSET(KPROCESS, ThreadListHead, 0x30);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessLock, 0x40);
		SET_GLOBAL_OFFSET(KPROCESS, StackCount, 0x348);
		SET_GLOBAL_OFFSET(KPROCESS, ProcessListEntry, 0x350);
		SET_GLOBAL_OFFSET(KPROCESS, UserDirectoryTableBase, 0x388);

		SET_GLOBAL_OFFSET(EPROCESS, ProcessLock, 0x438);
		SET_GLOBAL_OFFSET(EPROCESS, UniqueProcessId, 0x440);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveProcessLinks, 0x448);
		SET_GLOBAL_OFFSET(EPROCESS, AddressCreationLock, 0x4c8);
		SET_GLOBAL_OFFSET(EPROCESS, Win32WindowStation, 0x538);
		SET_GLOBAL_OFFSET(EPROCESS, Peb, 0x550);
		SET_GLOBAL_OFFSET(EPROCESS, ObjectTable, 0x570);
		SET_GLOBAL_OFFSET(EPROCESS, DebugPort, 0x578);
		SET_GLOBAL_OFFSET(EPROCESS, WoW64Process, 0x580);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListHead, 0x5e0);
		SET_GLOBAL_OFFSET(EPROCESS, ActiveThreads, 0x5f0);
		SET_GLOBAL_OFFSET(EPROCESS, ExitStatus, 0x7d4);
		SET_GLOBAL_OFFSET(EPROCESS, VadRoot, 0x7d8);
		SET_GLOBAL_OFFSET(EPROCESS, ThreadListLock, 0x860);

		SET_GLOBAL_OFFSET(KTHREAD, InitialStack, 0x28);
		SET_GLOBAL_OFFSET(KTHREAD, StackLimit, 0x30);
		SET_GLOBAL_OFFSET(KTHREAD, StackBase, 0x38);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadLock, 0x40);
		SET_GLOBAL_OFFSET(KTHREAD, KernelStack, 0x58);
		SET_GLOBAL_OFFSET(KTHREAD, ApcState, 0x98);
		SET_GLOBAL_OFFSET(KTHREAD, Teb, 0xf0);
		SET_GLOBAL_OFFSET(KTHREAD, State, 0x184);
		SET_GLOBAL_OFFSET(KTHREAD, Process, 0x220);
		SET_GLOBAL_OFFSET(KTHREAD, ThreadListEntry, 0x2f8);

		SET_GLOBAL_OFFSET(ETHREAD, StartAddress, 0x4a0);
		SET_GLOBAL_OFFSET(ETHREAD, Cid, 0x4c8);
		SET_GLOBAL_OFFSET(ETHREAD, Win32StartAddress, 0x520);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadListEntry, 0x538);
		SET_GLOBAL_OFFSET(ETHREAD, ThreadLock, 0x550);
		SET_GLOBAL_OFFSET(ETHREAD, CrossThreadFlags, 0x560);
		SET_GLOBAL_OFFSET(ETHREAD, SameThreadPassiveFlags, 0x564);
		SET_GLOBAL_OFFSET(ETHREAD, ExitStatus, 0x598);
		SET_GLOBAL_OFFSET(ETHREAD, UserFsBase, 0x638);
		SET_GLOBAL_OFFSET(ETHREAD, UserGsBase, 0x640);
		break;
	}
	default:
	{
		Status = STATUS_NOT_SUPPORTED;
		break;
	}
	}

	Status = STATUS_SUCCESS;

FINISH:
	PRINT_ELAPSED;
	return Status;
}

NTSTATUS DeviceInitialize(
	IN PDRIVER_OBJECT DriverObject)
{
#if TRACE_LOG_DEPTH & TRACE_ENTRY
	TraceLog(__PRETTY_FUNCTION__, __FUNCTION__);
#endif

	SAVE_CURRENT_COUNTER;
	auto Status = STATUS_INVALID_PARAMETER;

FINISH:
	PRINT_ELAPSED;
	return Status;
}

